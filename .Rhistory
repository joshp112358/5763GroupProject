rboot <- function(inputData, num_var,formula,nBoots){
library(foreach)
foreach(i = 1:nBoots,
.combine = "rbind") %dopar% {
bootData <- inputData[sample(1:nrow(inputData), nrow(inputData), replace = T),]
bootLM <- lm(formula,data=bootData)
bootLM$coef
}
}
r <- rboot(fitness,3,Age~Weight+Oxygen,200)
library(readr)
fitness <- read_csv("~/Desktop/5763GroupProject/data/fitness.csv")
View(fitness)
r <- rboot(fitness,3,Age~Weight+Oxygen,200)
library(microbenchmark)
microbenchmark(baselineBootstrap(fitness,3,Age~Weight+Oxygen,200),r <- rboot(fitness,3,Age~Weight+Oxygen,200))
install.packages(c("doParallel", "foreach", "knitr", "microbenchmark"))
library(readxl)
fitness <- read_excel("data/fitness.csv")
View(fitness)
fitness <- read.csv("~/Desktop/5763GroupProject/data/fitness.csv")
View(fitness)
knitr::opts_chunk$set(echo = TRUE)
number_of_variables <- 3
form <- Age~Weight+Oxygen
n <- 200
data <- read.csv(file="~/Desktop/5763GroupProject/data/fitness.csv", header=TRUE, sep=",")
baselineBootstrap <- function(inputData, num_var,formula, nBoots){
for(i in 1:nBoots){
#randomly sample data
bootData <- inputData[sample(1:nrow(inputData), nrow(inputData), replace = T),]
bootLM <- lm(formula, data = bootData)
# store the coefs
#for optimization put
if(i == 1){
bootResults <- matrix(coef(bootLM), ncol = num_var)
} else {
bootResults<- rbind(bootResults, matrix(coef(bootLM), ncol = num_var))
}
} # end of i loop
return(bootResults)
}
knitr::opts_chunk$set(echo = TRUE)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = num_var, ncol = 2)
for(i in 1:num_var){
matrix(quantile(coeff[,i], probs = c(0.025,0.975)))
}
}
number_of_variables <- 3
form <- Age~Weight+Oxygen
n <- 200
data <- read.csv(file="~/Desktop/5763GroupProject/data/fitness.csv", header=TRUE, sep=",")
baselineBootstrap <- function(inputData, num_var,formula, nBoots){
for(i in 1:nBoots){
#randomly sample data
bootData <- inputData[sample(1:nrow(inputData), nrow(inputData), replace = T),]
bootLM <- lm(formula, data = bootData)
# store the coefs
#for optimization put
if(i == 1){
bootResults <- matrix(coef(bootLM), ncol = num_var)
} else {
bootResults<- rbind(bootResults, matrix(coef(bootLM), ncol = num_var))
}
} # end of i loop
return(bootResults)
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = num_var, ncol = 2)
for(i in 1:num_var){
print(matrix(quantile(coeff[,i], probs = c(0.025,0.975))))
}
}
baselineBootstrap <- function(inputData, num_var,formula, nBoots){
for(i in 1:nBoots){
#randomly sample data
bootData <- inputData[sample(1:nrow(inputData), nrow(inputData), replace = T),]
bootLM <- lm(formula, data = bootData)
# store the coefs
#for optimization put
if(i == 1){
bootResults <- matrix(coef(bootLM), ncol = num_var)
} else {
bootResults<- rbind(bootResults, matrix(coef(bootLM), ncol = num_var))
}
} # end of i loop
return(bootResults)
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = num_var, ncol = 2)
for(i in 1:num_var){
mat<-cbind(matrix(quantile(coeff[,i], probs = c(0.025,0.975))))
}
print(mat.or.vec())
}
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = num_var, ncol = 2)
for(i in 1:num_var){
mat<-cbind(mat, matrix(quantile(coeff[,i], probs = c(0.025,0.975))))
}
print(mat.or.vec())
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = num_var, ncol = 3)
for(i in 1:num_var){
mat<-cbind(mat, matrix(quantile(coeff[,i], probs = c(0.025,0.975))))
}
print(mat.or.vec())
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = num_var, ncol = 3)
for(i in 1:num_var){
mat<-rbind(mat, matrix(quantile(coeff[,i], probs = c(0.025,0.975))))
}
print(mat.or.vec())
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = 2, ncol = num_var)
for(i in 1:num_var){
mat<-rbind(mat, matrix(quantile(coeff[,i], probs = c(0.025,0.975))))
}
print(mat.or.vec())
}
baselineBootstrap <- function(inputData, num_var,formula, nBoots){
for(i in 1:nBoots){
#randomly sample data
bootData <- inputData[sample(1:nrow(inputData), nrow(inputData), replace = T),]
bootLM <- lm(formula, data = bootData)
# store the coefs
#for optimization put
if(i == 1){
bootResults <- matrix(coef(bootLM), ncol = num_var)
} else {
bootResults<- rbind(bootResults, matrix(coef(bootLM), ncol = num_var))
}
} # end of i loop
return(bootResults)
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = 2, ncol = num_var)
for(i in 1:num_var){
print(matrix(quantile(coeff[,i], probs = c(0.025,0.975))))
}
print(mat.or.vec())
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
<
matrix(0L, nrow = 2, ncol = 3)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = 2, ncol = num_var)
for(i in 1:num_var){
mat[i,]<-matrix(quantile(coeff[,i], probs = c(0.025,0.975)))
}
print(mat)
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = 2, ncol = num_var)
for(i in 1:num_var){
mat[,i]<-matrix(quantile(coeff[,i], probs = c(0.025,0.975)))
}
print(mat)
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = 2, ncol = num_var)
for(i in 1:num_var){
mat[,i]<-matrix(quantile(coeff[,i], probs = c(0.025,0.975)))
}
print(mat)
return(mat)
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
speedyBoot <- function(inputData, num_var,formula, nBoots){
mat <- matrix(0L, nrow = nBoots, ncol = num_var)
for(i in 1:nBoots){
bootData <- inputData[sample(nrow(inputData), nrow(inputData), replace = T),]
bootLM <- lm(formula, data = bootData)
# store the coefs
mat[i,] <- coef(bootLM)
} # end of i loop
return(mat)
}
set.seed(9)
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1, number_of_variables)
speedyBoot <- function(inputData, num_var,formula, nBoots){
mat <- matrix(0L, nrow = nBoots, ncol = num_var)
for(i in 1:nBoots){
bootData <- inputData[sample(nrow(inputData), nrow(inputData), replace = T),]
bootLM <- lm(formula, data = bootData)
# store the coefs
mat[i,] <- coef(bootLM)
} # end of i loop
return(mat)
}
set.seed(9)
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1, number_of_variables)
set.seed(8)
n<- 1000
microbenchmark(
coefficients <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n),
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
)
install.packages("microbenchmark")
library(microbenchmark)
set.seed(8)
n<- 1000
microbenchmark(
coefficients <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n),
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
)
