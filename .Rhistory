mat <- matrix(0L, nrow = num_var, ncol = 2)
for(i in 1:num_var){
matrix(quantile(coeff[,i], probs = c(0.025,0.975)))
}
}
number_of_variables <- 3
form <- Age~Weight+Oxygen
n <- 200
data <- read.csv(file="~/Desktop/5763GroupProject/data/fitness.csv", header=TRUE, sep=",")
baselineBootstrap <- function(inputData, num_var,formula, nBoots){
for(i in 1:nBoots){
#randomly sample data
bootData <- inputData[sample(1:nrow(inputData), nrow(inputData), replace = T),]
bootLM <- lm(formula, data = bootData)
# store the coefs
#for optimization put
if(i == 1){
bootResults <- matrix(coef(bootLM), ncol = num_var)
} else {
bootResults<- rbind(bootResults, matrix(coef(bootLM), ncol = num_var))
}
} # end of i loop
return(bootResults)
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = num_var, ncol = 2)
for(i in 1:num_var){
print(matrix(quantile(coeff[,i], probs = c(0.025,0.975))))
}
}
baselineBootstrap <- function(inputData, num_var,formula, nBoots){
for(i in 1:nBoots){
#randomly sample data
bootData <- inputData[sample(1:nrow(inputData), nrow(inputData), replace = T),]
bootLM <- lm(formula, data = bootData)
# store the coefs
#for optimization put
if(i == 1){
bootResults <- matrix(coef(bootLM), ncol = num_var)
} else {
bootResults<- rbind(bootResults, matrix(coef(bootLM), ncol = num_var))
}
} # end of i loop
return(bootResults)
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = num_var, ncol = 2)
for(i in 1:num_var){
mat<-cbind(matrix(quantile(coeff[,i], probs = c(0.025,0.975))))
}
print(mat.or.vec())
}
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = num_var, ncol = 2)
for(i in 1:num_var){
mat<-cbind(mat, matrix(quantile(coeff[,i], probs = c(0.025,0.975))))
}
print(mat.or.vec())
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = num_var, ncol = 3)
for(i in 1:num_var){
mat<-cbind(mat, matrix(quantile(coeff[,i], probs = c(0.025,0.975))))
}
print(mat.or.vec())
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = num_var, ncol = 3)
for(i in 1:num_var){
mat<-rbind(mat, matrix(quantile(coeff[,i], probs = c(0.025,0.975))))
}
print(mat.or.vec())
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = 2, ncol = num_var)
for(i in 1:num_var){
mat<-rbind(mat, matrix(quantile(coeff[,i], probs = c(0.025,0.975))))
}
print(mat.or.vec())
}
baselineBootstrap <- function(inputData, num_var,formula, nBoots){
for(i in 1:nBoots){
#randomly sample data
bootData <- inputData[sample(1:nrow(inputData), nrow(inputData), replace = T),]
bootLM <- lm(formula, data = bootData)
# store the coefs
#for optimization put
if(i == 1){
bootResults <- matrix(coef(bootLM), ncol = num_var)
} else {
bootResults<- rbind(bootResults, matrix(coef(bootLM), ncol = num_var))
}
} # end of i loop
return(bootResults)
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = 2, ncol = num_var)
for(i in 1:num_var){
print(matrix(quantile(coeff[,i], probs = c(0.025,0.975))))
}
print(mat.or.vec())
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
<
matrix(0L, nrow = 2, ncol = 3)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = 2, ncol = num_var)
for(i in 1:num_var){
mat[i,]<-matrix(quantile(coeff[,i], probs = c(0.025,0.975)))
}
print(mat)
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = 2, ncol = num_var)
for(i in 1:num_var){
mat[,i]<-matrix(quantile(coeff[,i], probs = c(0.025,0.975)))
}
print(mat)
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = 2, ncol = num_var)
for(i in 1:num_var){
mat[,i]<-matrix(quantile(coeff[,i], probs = c(0.025,0.975)))
}
print(mat)
return(mat)
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
speedyBoot <- function(inputData, num_var,formula, nBoots){
mat <- matrix(0L, nrow = nBoots, ncol = num_var)
for(i in 1:nBoots){
bootData <- inputData[sample(nrow(inputData), nrow(inputData), replace = T),]
bootLM <- lm(formula, data = bootData)
# store the coefs
mat[i,] <- coef(bootLM)
} # end of i loop
return(mat)
}
set.seed(9)
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1, number_of_variables)
speedyBoot <- function(inputData, num_var,formula, nBoots){
mat <- matrix(0L, nrow = nBoots, ncol = num_var)
for(i in 1:nBoots){
bootData <- inputData[sample(nrow(inputData), nrow(inputData), replace = T),]
bootLM <- lm(formula, data = bootData)
# store the coefs
mat[i,] <- coef(bootLM)
} # end of i loop
return(mat)
}
set.seed(9)
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1, number_of_variables)
set.seed(8)
n<- 1000
microbenchmark(
coefficients <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n),
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
)
install.packages("microbenchmark")
library(microbenchmark)
set.seed(8)
n<- 1000
microbenchmark(
coefficients <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n),
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
)
knitr::opts_chunk$set(echo = TRUE)
number_of_variables <- 3
form <- Age~Weight+Oxygen
n <- 200
data <- read.csv(file="~/Desktop/5763GroupProject/data/fitness.csv", header=TRUE, sep=",")
get_quantiles <- function(coeff, num_var){
mat <- matrix(0L, nrow = 2, ncol = num_var)
for(i in 1:num_var){
mat[,i]<-matrix(quantile(coeff[,i], probs = c(0.025,0.975)))
}
#print(mat)
return(mat)
}
baselineBootstrap <- function(inputData, num_var,formula, nBoots){
for(i in 1:nBoots){
#randomly sample data
bootData <- inputData[sample(1:nrow(inputData), nrow(inputData), replace = T),]
bootLM <- lm(formula, data = bootData)
# store the coefs
#for optimization put
if(i == 1){
bootResults <- matrix(coef(bootLM), ncol = num_var)
} else {
bootResults<- rbind(bootResults, matrix(coef(bootLM), ncol = num_var))
}
} # end of i loop
return(bootResults)
}
set.seed(9)
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1,number_of_variables)
speedyBoot <- function(inputData, num_var,formula, nBoots){
mat <- matrix(0L, nrow = nBoots, ncol = num_var)
for(i in 1:nBoots){
bootData <- inputData[sample(nrow(inputData), nrow(inputData), replace = T),]
bootLM <- lm(formula, data = bootData)
# store the coefs
mat[i,] <- coef(bootLM)
} # end of i loop
return(mat)
}
set.seed(9)
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1, number_of_variables)
library(microbenchmark)
set.seed(8)
n<- 1000
microbenchmark(
coefficients <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n),
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
)
library(microbenchmark)
set.seed(8)
n<- 100
microbenchmark(
coefficients <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n),
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
)
View(data)
View(coefficients)
library(microbenchmark)
set.seed(8)
n<- 100
res <- microbenchmark(
coefficients <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n),
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
)
print(res)
speedy4 <- function(inputData, num_var,formula){
bootLM <- lm(formula, data = inputData[sample(nrow(inputData), nrow(inputData), replace = T),])
return(coef(bootLM))
}
library(foreach)
library(doParallel)
set.seed(9)
cores=detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
clusterSetRNGStream(cl=cl,9)
bootCoefs <- foreach(i = 1:n, .combine =rbind) %dopar% speedy4(inputData = data,
num_var = number_of_variables,
formula = form)
get_quantiles(bootCoefs, number_of_variables)
stopCluster(cl)
library(foreach)
library(doParallel)
set.seed(9)
cores=detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
clusterSetRNGStream(cl=cl,9)
bootCoefs <- foreach(i = 1:n, .combine =rbind) %dopar% speedy4(inputData = data,
num_var = number_of_variables,
formula = form)
get_quantiles(bootCoefs, number_of_variables)
stopCluster(cl)
cores=detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
clusterSetRNGStream(cl=cl,9)
n<-1000
microbenchmark(
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n),
bootCoefs <- foreach(i = 1:n, .combine = rbind) %dopar% speedy4(
inputData = data,
num_var = number_of_variables,
formula = form)
)
cores=detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
clusterSetRNGStream(cl=cl,9)
n<-100
microbenchmark(
coefficients1 <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n),
bootCoefs <- foreach(i = 1:n, .combine = rbind) %dopar% speedy4(
inputData = data,
num_var = number_of_variables,
formula = form)
)
stopCluster(cl)
install.packages("tidyverse")
speedyBoot <- function(inputData, num_var,formula, nBoots){
mat <- matrix(0L, nrow = nBoots, ncol = num_var)
for(i in 1:nBoots){
bootData <- inputData[sample(nrow(inputData), nrow(inputData), replace = T),]
bootLM <- lm(formula, data = bootData)
# store the coefs
mat[i,] <- coef(bootLM)
} # end of i loop
return(mat)
}
set.seed(9)
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
get_quantiles(coefficients1, number_of_variables)
library(microbenchmark)
set.seed(8)
n<- 100
res <- microbenchmark(
coefficients <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n),
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
)
print(res)
res
library(microbenchmark)
set.seed(8)
n<- 100
res <- microbenchmark(
coefficients <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n),
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
)
res
res
library(microbenchmark)
set.seed(8)
n<- 100
res <- microbenchmark(
coefficients <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n),
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
)
res
res
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
library(microbenchmark)
set.seed(8)
n<- 100
microbenchmark(
coefficients <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n),
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
)
library(microbenchmark)
set.seed(8)
n<- 100
microbenchmark(
coefficients <- baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n),
coefficients1 <- speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
)
library(microbenchmark)
set.seed(8)
n<- 100
ses <- microbenchmark(
baselineBootstrap(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n),
speedyBoot(inputData = data,
num_var = number_of_variables,
formula = form,
nBoots = n)
)
ses
ses
ses
shiny::runApp('statsy/statsy')
runApp('statsy/statsy')
runApp('statsy/statsy')
runApp('statsy/statsy')
runApp('statsy/statsy')
runApp('statsy/statsy')
runApp('statsy/statsy')
